
# Also see "include/mbedtls/config.h"

CFLAGS	?= -O2
WARNING_CFLAGS ?=  -Wall -Wextra
LDFLAGS ?=

CRYPTO_INCLUDES ?= -I../include
LOCAL_CFLAGS = $(WARNING_CFLAGS) $(CRYPTO_INCLUDES) -D_FILE_OFFSET_BITS=64
LOCAL_LDFLAGS =

#ifdef DEBUG
LOCAL_CFLAGS += -g3
#endif

# MicroBlaze specific options:
# CFLAGS += -mno-xl-soft-mul -mxl-barrel-shift

# To compile on Plan9:
# CFLAGS += -D_BSD_EXTENSION

# if were running on Windows build for Windows
ifdef WINDOWS
WINDOWS_BUILD=1
else ifeq ($(shell uname -s),Darwin)
ifeq ($(AR),ar)
APPLE_BUILD ?= 1
endif
endif

# To compile as a shared library:
ifdef SHARED
# all code is position-indep with mingw, avoid warning about useless flag
ifndef WINDOWS_BUILD
LOCAL_CFLAGS += -fPIC -fpic
endif
endif

SOEXT_CRYPTO=so.4

# Set AR_DASH= (empty string) to use an ar implementation that does not accept
# the - prefix for command line options (e.g. llvm-ar)
AR_DASH ?= -

ARFLAGS = $(AR_DASH)src
ifdef APPLE_BUILD
ifneq ($(APPLE_BUILD),0)
ARFLAGS = $(AR_DASH)Src
RLFLAGS = -no_warning_for_no_symbols -c
RL ?= ranlib
endif
endif

DLEXT ?= so
ifdef WINDOWS_BUILD
# Windows shared library extension:
DLEXT = dll
else ifdef APPLE_BUILD
ifneq ($(APPLE_BUILD),0)
# Mac OS X shared library extension:
DLEXT = dylib
endif
endif

OBJS_CRYPTO=	$(OUT_DIR)/aes.o		$(OUT_DIR)/aesni.o		$(OUT_DIR)/arc4.o		\
		$(OUT_DIR)/aria.o		$(OUT_DIR)/asn1parse.o	$(OUT_DIR)/asn1write.o	\
		$(OUT_DIR)/base64.o	$(OUT_DIR)/bignum.o	$(OUT_DIR)/blowfish.o	\
		$(OUT_DIR)/camellia.o	$(OUT_DIR)/ccm.o		$(OUT_DIR)/chacha20.o	\
		$(OUT_DIR)/chachapoly.o	$(OUT_DIR)/cipher.o	$(OUT_DIR)/cipher_wrap.o	\
		$(OUT_DIR)/cmac.o		$(OUT_DIR)/ctr_drbg.o	$(OUT_DIR)/des.o		\
		$(OUT_DIR)/dhm.o		$(OUT_DIR)/ecdh.o		$(OUT_DIR)/ecdsa.o		\
		$(OUT_DIR)/ecjpake.o	$(OUT_DIR)/ecp.o				\
		$(OUT_DIR)/ecp_curves.o	$(OUT_DIR)/entropy.o	$(OUT_DIR)/entropy_poll.o	\
		$(OUT_DIR)/gcm.o		$(OUT_DIR)/havege.o			\
		$(OUT_DIR)/hkdf.o						\
		$(OUT_DIR)/hmac_drbg.o	$(OUT_DIR)/md.o		$(OUT_DIR)/md2.o		\
		$(OUT_DIR)/md4.o		$(OUT_DIR)/md5.o				\
		$(OUT_DIR)/memory_buffer_alloc.o		$(OUT_DIR)/nist_kw.o	\
		$(OUT_DIR)/oid.o		$(OUT_DIR)/padlock.o	$(OUT_DIR)/pem.o		\
		$(OUT_DIR)/pk.o		$(OUT_DIR)/pk_wrap.o	$(OUT_DIR)/pkcs12.o	\
		$(OUT_DIR)/pkcs5.o		$(OUT_DIR)/pkparse.o	$(OUT_DIR)/pkwrite.o	\
		$(OUT_DIR)/platform.o	$(OUT_DIR)/platform_util.o	$(OUT_DIR)/poly1305.o	\
		$(OUT_DIR)/psa_crypto.o	$(OUT_DIR)/psa_crypto_se.o			\
		$(OUT_DIR)/psa_crypto_slot_management.o			\
		$(OUT_DIR)/psa_crypto_storage.o				\
		$(OUT_DIR)/psa_its_file.o					\
		$(OUT_DIR)/ripemd160.o	$(OUT_DIR)/rsa_internal.o	$(OUT_DIR)/rsa.o  		\
		$(OUT_DIR)/sha1.o		$(OUT_DIR)/sha256.o	$(OUT_DIR)/sha512.o	\
		$(OUT_DIR)/threading.o	$(OUT_DIR)/timing.o			\
		$(OUT_DIR)/xtea.o

# For files generated by the parent project (Mbed TLS) when building Mbed
# Crypto as a submodule, ensure that the parent project instance is used.
ifeq ($(USE_CRYPTO_SUBMODULE), 1)
OBJS_CRYPTO += $(patsubst %.c,%.o, $(realpath ../../library/error.c))
OBJS_CRYPTO += $(patsubst %.c,%.o, $(realpath ../../library/version.c))
OBJS_CRYPTO += $(patsubst %.c,%.o, $(realpath ../../library/version_features.c))
else
OBJS_CRYPTO += $(OUT_DIR)/error.o
OBJS_CRYPTO += $(OUT_DIR)/version.o
OBJS_CRYPTO += $(OUT_DIR)/version_features.o
endif

#include ../3rdparty/Makefile.inc
LOCAL_CFLAGS+=$(THIRDPARTY_INCLUDES)
OBJS_CRYPTO+=$(THIRDPARTY_CRYPTO_OBJECTS)

.SILENT:

.PHONY: all static shared clean

ifndef SHARED
all: static
else
all: shared static
endif

static: $(OUT_DIR)/libmbedcrypto.a

shared: libmbedcrypto.$(DLEXT)

# crypto
$(OUT_DIR)/libmbedcrypto.a: $(OBJS_CRYPTO)
	echo "  AR    $@"
	$(AR) $(ARFLAGS) $@ $(OBJS_CRYPTO)
ifdef APPLE_BUILD
ifneq ($(APPLE_BUILD),0)
	echo "  RL    $@"
	$(RL) $(RLFLAGS) $@
endif
endif

libmbedcrypto.$(SOEXT_CRYPTO): $(OBJS_CRYPTO)
	echo "  LD    $@"
	$(CC) -shared -Wl,-soname,$@ $(LOCAL_LDFLAGS) $(LDFLAGS) -o $@ $(OBJS_CRYPTO)

libmbedcrypto.so: libmbedcrypto.$(SOEXT_CRYPTO)
	echo "  LN    $@ -> $<"
	ln -sf $< $@

libmbedcrypto.dylib: $(OBJS_CRYPTO)
	echo "  LD    $@"
	$(CC) -dynamiclib $(LOCAL_LDFLAGS) $(LDFLAGS) -o $@ $(OBJS_CRYPTO)

libmbedcrypto.dll: $(OBJS_CRYPTO)
	echo "  LD    $@"
	$(CC) -shared -Wl,-soname,$@ -Wl,--out-implib,$@.a -o $@ $(OBJS_CRYPTO) -lws2_32 -lwinmm -lgdi32 -static-libgcc $(LOCAL_LDFLAGS) $(LDFLAGS)

libmbedcrypto.$(DLEXT): | libmbedcrypto.a

$(OUT_DIR)/aes.o: aes.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/aesni.o: aesni.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/arc4.o: arc4.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/aria.o: aria.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/asn1parse.o: asn1parse.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/asn1write.o: asn1write.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/base64.o: base64.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/bignum.o: bignum.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/blowfish.o: blowfish.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/camellia.o: camellia.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/ccm.o: ccm.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/chacha20.o: chacha20.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/chachapoly.o: chachapoly.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/cipher.o: cipher.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/cipher_wrap.o: cipher_wrap.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/cmac.o: cmac.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/ctr_drbg.o: ctr_drbg.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/des.o: des.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/dhm.o: dhm.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/ecdh.o: ecdh.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/ecdsa.o: ecdsa.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/ecjpake.o: ecjpake.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/ecp.o: ecp.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/ecp_curves.o: ecp_curves.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/entropy.o: entropy.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/entropy_poll.o: entropy_poll.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/gcm.o: gcm.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/havege.o: havege.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/hkdf.o: hkdf.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/hmac_drbg.o: hmac_drbg.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/md.o: md.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/md2.o: md2.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/md4.o: md4.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/md5.o: md5.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/memory_buffer_alloc.o: memory_buffer_alloc.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/nist_kw.o: nist_kw.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/oid.o: oid.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/padlock.o: padlock.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/pem.o: pem.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/pk.o: pk.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/pk_wrap.o: pk_wrap.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/pkcs12.o: pkcs12.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/pkcs5.o: pkcs5.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/pkparse.o: pkparse.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/pkwrite.o: pkwrite.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/platform.o: platform.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/platform_util.o: platform_util.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/poly1305.o: poly1305.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/psa_crypto.o: psa_crypto.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/psa_crypto_se.o: psa_crypto_se.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/psa_crypto_slot_management.o: psa_crypto_slot_management.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/psa_crypto_storage.o: psa_crypto_storage.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/psa_its_file.o: psa_its_file.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/ripemd160.o: ripemd160.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/rsa_internal.o: rsa_internal.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/rsa.o: rsa.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/sha1.o: sha1.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/sha256.o: sha256.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/sha512.o: sha512.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/threading.o: threading.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/timing.o: timing.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/xtea.o: xtea.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/error.o: error.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/version.o: version.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<
$(OUT_DIR)/version_features.o: version_features.c
	echo "	CC	$<"
	$(CC) $(LOCAL_CFLAGS) $(CFLAGS) -o $@ -c $<

clean:
ifndef WINDOWS
	rm -f *.o libmbed* $(OBJS_CRYPTO)
else
	if exist *.o del /Q /F *.o
	if exist libmbed* del /Q /F libmbed*
	if exist $(OBJS_CRYPTO) del /Q /F $(OBJS_CRYPTO)
endif
